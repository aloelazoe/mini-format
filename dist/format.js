window.storyFormat({"author":"<a href=\"https://twitter.com/aloelazoe\">Elkie Nova</a>","description":"custom story format for twine","name":"mini-format","proofing":false,"version":"0.1.1","url":"https://github.com/aloelazoe/mini-format","source":"<head><title>{{STORY_NAME}}</title><meta charset=\"utf-8\"><script>(function () {\n\t'use strict';\n\n\tvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\tfunction createCommonjsModule(fn, module) {\n\t\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n\t}\n\n\tvar download = createCommonjsModule(function (module, exports) {\n\t//download.js v4.2, by dandavis; 2008-2016. [MIT] see http://danml.com/download.html for tests/usage\n\t// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime\n\t// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs\n\t// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.\n\t// v4 adds AMD/UMD, commonJS, and plain browser support\n\t// v4.1 adds url download capability via solo URL argument (same domain/CORS only)\n\t// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors\n\t// https://github.com/rndme/download\n\n\t(function (root, factory) {\n\t\t{\n\t\t\t// Node. Does not work with strict CommonJS, but\n\t\t\t// only CommonJS-like environments that support module.exports,\n\t\t\t// like Node.\n\t\t\tmodule.exports = factory();\n\t\t}\n\t}(commonjsGlobal, function () {\n\n\t\treturn function download(data, strFileName, strMimeType) {\n\n\t\t\tvar self = window, // this script is only for browsers anyway...\n\t\t\t\tdefaultMime = \"application/octet-stream\", // this default mime also triggers iframe downloads\n\t\t\t\tmimeType = strMimeType || defaultMime,\n\t\t\t\tpayload = data,\n\t\t\t\turl = !strFileName && !strMimeType && payload,\n\t\t\t\tanchor = document.createElement(\"a\"),\n\t\t\t\ttoString = function(a){return String(a);},\n\t\t\t\tmyBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),\n\t\t\t\tfileName = strFileName || \"download\",\n\t\t\t\tblob,\n\t\t\t\treader;\n\t\t\t\tmyBlob= myBlob.call ? myBlob.bind(self) : Blob ;\n\t\t  \n\t\t\tif(String(this)===\"true\"){ //reverse arguments, allowing download.bind(true, \"text/xml\", \"export.xml\") to act as a callback\n\t\t\t\tpayload=[payload, mimeType];\n\t\t\t\tmimeType=payload[0];\n\t\t\t\tpayload=payload[1];\n\t\t\t}\n\n\n\t\t\tif(url && url.length< 2048){ // if no filename and no mime, assume a url was passed as the only argument\n\t\t\t\tfileName = url.split(\"/\").pop().split(\"?\")[0];\n\t\t\t\tanchor.href = url; // assign href prop to temp anchor\n\t\t\t  \tif(anchor.href.indexOf(url) !== -1){ // if the browser determines that it's a potentially valid url path:\n\t        \t\tvar ajax=new XMLHttpRequest();\n\t        \t\tajax.open( \"GET\", url, true);\n\t        \t\tajax.responseType = 'blob';\n\t        \t\tajax.onload= function(e){ \n\t\t\t\t\t  download(e.target.response, fileName, defaultMime);\n\t\t\t\t\t};\n\t        \t\tsetTimeout(function(){ ajax.send();}, 0); // allows setting custom ajax headers using the return:\n\t\t\t\t    return ajax;\n\t\t\t\t} // end if valid url?\n\t\t\t} // end if url?\n\n\n\t\t\t//go ahead and download dataURLs right away\n\t\t\tif(/^data:([\\w+-]+\\/[\\w+.-]+)?[,;]/.test(payload)){\n\t\t\t\n\t\t\t\tif(payload.length > (1024*1024*1.999) && myBlob !== toString ){\n\t\t\t\t\tpayload=dataUrlToBlob(payload);\n\t\t\t\t\tmimeType=payload.type || defaultMime;\n\t\t\t\t}else{\t\t\t\n\t\t\t\t\treturn navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:\n\t\t\t\t\t\tnavigator.msSaveBlob(dataUrlToBlob(payload), fileName) :\n\t\t\t\t\t\tsaver(payload) ; // everyone else can save dataURLs un-processed\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}else{//not data url, is it a string with special needs?\n\t\t\t\tif(/([\\x80-\\xff])/.test(payload)){\t\t\t  \n\t\t\t\t\tvar i=0, tempUiArr= new Uint8Array(payload.length), mx=tempUiArr.length;\n\t\t\t\t\tfor(i;i<mx;++i) tempUiArr[i]= payload.charCodeAt(i);\n\t\t\t\t \tpayload=new myBlob([tempUiArr], {type: mimeType});\n\t\t\t\t}\t\t  \n\t\t\t}\n\t\t\tblob = payload instanceof myBlob ?\n\t\t\t\tpayload :\n\t\t\t\tnew myBlob([payload], {type: mimeType}) ;\n\n\n\t\t\tfunction dataUrlToBlob(strUrl) {\n\t\t\t\tvar parts= strUrl.split(/[:;,]/),\n\t\t\t\ttype= parts[1],\n\t\t\t\tdecoder= parts[2] == \"base64\" ? atob : decodeURIComponent,\n\t\t\t\tbinData= decoder( parts.pop() ),\n\t\t\t\tmx= binData.length,\n\t\t\t\ti= 0,\n\t\t\t\tuiArr= new Uint8Array(mx);\n\n\t\t\t\tfor(i;i<mx;++i) uiArr[i]= binData.charCodeAt(i);\n\n\t\t\t\treturn new myBlob([uiArr], {type: type});\n\t\t\t }\n\n\t\t\tfunction saver(url, winMode){\n\n\t\t\t\tif ('download' in anchor) { //html5 A[download]\n\t\t\t\t\tanchor.href = url;\n\t\t\t\t\tanchor.setAttribute(\"download\", fileName);\n\t\t\t\t\tanchor.className = \"download-js-link\";\n\t\t\t\t\tanchor.innerHTML = \"downloading...\";\n\t\t\t\t\tanchor.style.display = \"none\";\n\t\t\t\t\tdocument.body.appendChild(anchor);\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tanchor.click();\n\t\t\t\t\t\tdocument.body.removeChild(anchor);\n\t\t\t\t\t\tif(winMode===true){setTimeout(function(){ self.URL.revokeObjectURL(anchor.href);}, 250 );}\n\t\t\t\t\t}, 66);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// handle non-a[download] safari as best we can:\n\t\t\t\tif(/(Version)\\/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*Safari\\//.test(navigator.userAgent)) {\n\t\t\t\t\tif(/^data:/.test(url))\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t\t\tif(!window.open(url)){ // popup blocked, offer direct download:\n\t\t\t\t\t\tif(confirm(\"Displaying New Document\\n\\nUse Save As... to download, then click back to return to this page.\")){ location.href=url; }\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t//do iframe dataURL download (old ch+FF):\n\t\t\t\tvar f = document.createElement(\"iframe\");\n\t\t\t\tdocument.body.appendChild(f);\n\n\t\t\t\tif(!winMode && /^data:/.test(url)){ // force a mime that will download:\n\t\t\t\t\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t\t}\n\t\t\t\tf.src=url;\n\t\t\t\tsetTimeout(function(){ document.body.removeChild(f); }, 333);\n\n\t\t\t}//end saver\n\n\n\n\n\t\t\tif (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\n\t\t\t\treturn navigator.msSaveBlob(blob, fileName);\n\t\t\t}\n\n\t\t\tif(self.URL){ // simple fast and modern way using Blob and URL:\n\t\t\t\tsaver(self.URL.createObjectURL(blob), true);\n\t\t\t}else{\n\t\t\t\t// handle non-Blob()+non-URL browsers:\n\t\t\t\tif(typeof blob === \"string\" || blob.constructor===toString ){\n\t\t\t\t\ttry{\n\t\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \";base64,\"  +  self.btoa(blob)  );\n\t\t\t\t\t}catch(y){\n\t\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \",\" + encodeURIComponent(blob)  );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Blob but not URL support:\n\t\t\t\treader=new FileReader();\n\t\t\t\treader.onload=function(e){\n\t\t\t\t\tsaver(this.result);\n\t\t\t\t};\n\t\t\t\treader.readAsDataURL(blob);\n\t\t\t}\n\t\t\treturn true;\n\t\t}; /* end download() */\n\t}));\n\t});\n\n\tfunction main() {\n\t\t// TODO: use rollup-plugin-babel in bundle.mjs for transpiling ES6\n\t\tconst storyDataElm = document.getElementsByTagName('tw-storydata')[0];\n\t\tconst passageElms = [...document.getElementsByTagName('tw-passagedata')];\n\t\tconst tagElms = [...document.getElementsByTagName('tw-tag')];\n\n\t\tvar data = {\n\t\t\tname: storyDataElm.getAttribute('name'),\n\t\t\tstartPassageId: storyDataElm.getAttribute('startnode'),\n\t\t\ttags: [],\n\t\t\tpassages: []\n\t\t};\n\n\t\ttagElms.forEach(function (tagElm){\n\t\t\tdata.tags.push(tagElm.getAttribute('name'));\n\t\t\t// they also have color attribute which seems useless outside of the editor\n\t\t});\n\n\t\tpassageElms.forEach(function (passageElm){\n\t\t\tvar tags = passageElm.getAttribute('tags');\n\t\t\ttags = tags ? tags.split(' ') : [];\n\n\t\t\tdata.passages.push({\n\t\t\t\tid: passageElm.getAttribute('pid'),\n\t\t\t\tname: passageElm.getAttribute('name'),\n\t\t\t\ttags: tags,\n\t\t\t\tcontent: passageElm.innerHTML\n\t\t\t});\n\t\t});\n\n\t\t// avoid the last two arguments of JSON.stringify to produce condensesd json\n\t\tdownload(JSON.stringify(data, null, 2), data.name + '.json', 'application/json');\n\t}\n\n\twindow.onload = main;\n\n}());</script></head><body><div id=\"data\">{{STORY_DATA}}</div></body>"});